import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import sys

def get_forms(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, "html.parser")
        return soup.find_all("form")
    except requests.exceptions.RequestException as e:
        print(f"Error retrieving forms: {e}")
        return []

def get_form_details(form):
    details = {}
    action = form.attrs.get("action", "")
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name, "value": ""})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def submit_form(form_details, url, data):
    target_url = urljoin(url, form_details["action"])
    try:
        if form_details["method"] == "post":
            return requests.post(target_url, data=data, timeout=10)
        else:
            return requests.get(target_url, params=data, timeout=10)
    except requests.exceptions.RequestException as e:
        print(f"Error submitting form: {e}")
        return None

def scan_sql_injection(url):
    forms = get_forms(url)
    if not forms:
        return []
    print(f"[+] Detected {len(forms)} forms on {url}.")
    payloads = ["' OR '1'='1", '" OR "1"="1', "' OR '1'='1' --", '" OR "1"="1" --']
    vulnerabilities = []
    for form in forms:
        form_details = get_form_details(form)
        for payload in payloads:
            data = {}
            for input_tag in form_details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["name"] is None:
                    continue
                input_tag["value"] = payload
                data[input_tag["name"]] = input_tag["value"]
            res = submit_form(form_details, url, data)
            if res and ("syntax" in res.text.lower() or "error" in res.text.lower()):
                print(f"[!] SQL Injection vulnerability detected with payload '{payload}' on {url}")
                print(f"[*] Form details:")
                print(form_details)
                vulnerabilities.append("SQL Injection")
                break
    return vulnerabilities

def scan_xss(url):
    forms = get_forms(url)
    if not forms:
        return []
    print(f"[+] Detected {len(forms)} forms on {url}.")
    js_script = "<script>alert('XSS')</script>"
    vulnerabilities = []
    for form in forms:
        form_details = get_form_details(form)
        data = {}
        for input_tag in form_details["inputs"]:
            if input_tag["type"] == "hidden" or input_tag["name"] is None:
                continue
            input_tag["value"] = js_script
            data[input_tag["name"]] = input_tag["value"]
        content = submit_form(form_details, url, data)
        if content and js_script in content.text:
            print(f"[!] XSS vulnerability detected on {url}")
            print(f"[*] Form details:")
            print(form_details)
            vulnerabilities.append("XSS")
            break
    return vulnerabilities

def detect_csrf_protection(url):
    forms = get_forms(url)
    if not forms:
        return []
    print(f"[+] Detected {len(forms)} forms on {url}.")
    vulnerabilities = []
    for form in forms:
        form_details = get_form_details(form)
        has_csrf_token = any(input_tag["name"] in ["csrf_token", "token", "xsrf_token"] for input_tag in form_details["inputs"])
        if not has_csrf_token:
            print(f"[!] CSRF vulnerability detected on {url}")
            print(f"[*] Form details:")
            print(form_details)
            vulnerabilities.append("CSRF")
    return vulnerabilities

def get_cve_info(cve_id):
    url = f"https://cve.circl.lu/api/cve/{cve_id}"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        cvss_score = data.get("cvss", "CVSS score not available")
        return cvss_score
    except requests.exceptions.RequestException as e:
        print(f"HTTP error occurred: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")
    return "Error retrieving CVSS score"

def main(url):
    print(f"Scanning URL: {url}")
    vulnerabilities = []
    vulnerabilities.extend(scan_sql_injection(url))
    vulnerabilities.extend(scan_xss(url))
    vulnerabilities.extend(detect_csrf_protection(url))

    # Mapping of vulnerabilities to CVE IDs
    cve_mapping = {
        "SQL Injection": "CVE-2021-22986",
        "XSS": "CVE-2020-0601",
        "CSRF": "CVE-2019-0708"  # Example CVE ID for CSRF
    }

    # Retrieve and print CVSS scores for detected vulnerabilities
    for vuln in set(vulnerabilities):
        cve_id = cve_mapping.get(vuln)
        if cve_id:
            print(f"Retrieving CVE info for {cve_id}...")
            cve_info = get_cve_info(cve_id)
            print(f"CVSS score for {cve_id}: {cve_info}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 web_vul.py <url>")
        sys.exit(1)
    url = sys.argv[1]
    main(url)